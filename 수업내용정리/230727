# 실습
dockerfile 만들어서 static template git clone으로 넣어두고 
소스 받아서 이미지 생성(nginx, httpd)
> kubernetes에서 만든 이미지를 사용할 수 있도록

curl wget으로 웹에서 압축파일 받아올수 있음
파일 압축 먼저 해야함
releases 에서 작업하면 됨
작업하면 바로 압축폴더 다운 받아짐 zip or tar.gz 중 누르면 됨
링크 필요하면 마우스 오른쪽에서 링크받아짐

https://github.com/dy14000/static_web_template/archive/refs/tags/v1.0.tar.gz


Git  
 버전관리 시스템
  무엇을 버전관리? 웹소스 코드, 프로그램 소스 코드, 운영관리 파일 등

Docker 
 컨테이너 실행
 컨테이너를 왜 사용하는가?
  1. 적은 자원을 이용하여 다양한 서비스 제공(하나의 서버로)
  2. 어떤 환경에서든 동일한 실행 환경을 제공하기 위해
  3. 서비스의 문제가 발생했을 때 쉽고 빠르게 해당 서비스를 다시 실행하기 위해

  kubernetes
   컨테이너 오케스트레이션 프로그램
   오케스트레이션이 왜 필요한가?
    1. 수 많은 컨테이너들을 효율적으로 관리하기 위해
    2. 다양한 서비스를 쉽게 베포하기 위한 다양한 환경을 제공


레거시(고전) 환경에서의 개발 및 베포 과정
 웹서비스를 위한 웹소스를 진행한다고 가정합니다.
 
 1. 웹서비스를 위한 웹소스 개발
     개발을 위한 운영 환경 > window linux macOS 다양한 운영체계에서 개발 및 테스트진행
 2. 각자 진행한 개발 소스를 병합
     하나의 테스트 서버에서 병합을 진행후 테스트수행
 3. 실제 운영 환경 베포
     실제 운영환경 > linux (보통 많이 사용함)의 베포버전 사용
 4. 운영을 하면서 지속적인 모니터링 수행
      모니터링을 하면서 발생되는 문제를 기록, 수정 보완함 > 유지보수

 5. 이슈를 주기적으로 해결 1,2,3,4을 반복 진행함   


  343  kubectl apply -f deployment.web.yaml
  344  kubectl apply -f service_nodeport.yaml
  345  kubectl get svc > 설치 확인

# dockerhud에 만든 이미지 push
 dockerfile로 만든 후 docker build 
 build 할때 계정/위치:tags -t 옵션으로 지정

 dockerhud에 있는 registy명을 위치에 넣어줘야함 
 tag로 다운받을때 파일명 확인 하면됨

 ** kubectl apply은 yaml 위치 해당에서 실행해야함
 yaml 파일 deployment, service_nodeport를 만들어서 작동 시켰음
 deployment : 베포 버전 관리용 / 내부적으로 ReplicaSet을 이용
 yaml 양식이 selector : matchLables 밑에 replicas 3개로 해서 container 1개 만듦

(+) yaml 작성
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-httpd-static-web
spec:
  selector:
    matchLabels:
      app: static-web
      version: "1.1"
      server: httpd
      date: "2023-07"
  replicas: 3
  template:
    metadata:
      labels:
        app: static-web
        version: "1.1"
        server: httpd
        date: "2023-07"
    spec:
      containers:
      - name: httpd-static-web
        image: dy14000/apache:1.2
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 80
      imagePullSecrets:
       - name: docker-pull-secret    


apiVersion: v1
kind: Service
metadata:
  name: service-httpd
spec:
  type: NodePort
  selector:
    app: static-web
    server: httpd >> labels랑 매치가 되는거 찾아봄 (deployment.yaml에서)
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP

service 파일에 그대로 추가 해도됨~~ 비슷한 서비스기 때문에, 관리적 측면에서는
다른 파일 만들어서 하는게 나을때가 있음

# 로드밸랜서 설정
vagrant@nginxLB:~$ sudo vi /etc/nginx/sites-available/default
upstream loadbalancer {
       server 192.168.10.11:32051;
       server 192.168.10.11:32088;
       server 192.168.10.12:32051;
       server 192.168.10.12:32088;
       server 192.168.10.13:32051;
       server 192.168.10.13:32088;
}
        location / {
                proxy_pass http://loadbalancer;
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }



